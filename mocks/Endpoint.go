// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Endpoint is an autogenerated mock type for the Endpoint type
type Endpoint struct {
	mock.Mock
}

type Endpoint_Expecter struct {
	mock *mock.Mock
}

func (_m *Endpoint) EXPECT() *Endpoint_Expecter {
	return &Endpoint_Expecter{mock: &_m.Mock}
}

// MapEndpoint provides a mock function with no fields
func (_m *Endpoint) MapEndpoint() {
	_m.Called()
}

// Endpoint_MapEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapEndpoint'
type Endpoint_MapEndpoint_Call struct {
	*mock.Call
}

// MapEndpoint is a helper method to define mock.On call
func (_e *Endpoint_Expecter) MapEndpoint() *Endpoint_MapEndpoint_Call {
	return &Endpoint_MapEndpoint_Call{Call: _e.mock.On("MapEndpoint")}
}

func (_c *Endpoint_MapEndpoint_Call) Run(run func()) *Endpoint_MapEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Endpoint_MapEndpoint_Call) Return() *Endpoint_MapEndpoint_Call {
	_c.Call.Return()
	return _c
}

func (_c *Endpoint_MapEndpoint_Call) RunAndReturn(run func()) *Endpoint_MapEndpoint_Call {
	_c.Run(run)
	return _c
}

// NewEndpoint creates a new instance of Endpoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEndpoint(t interface {
	mock.TestingT
	Cleanup(func())
}) *Endpoint {
	mock := &Endpoint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
